@INPROCEEDINGS{7012815,
  author={Sharma, Chandershekhar and Jain, S.C.},
  booktitle={2014 International Conference on Advances in Engineering & Technology Research (ICAETR - 2014)}, 
  title={Analysis and classification of SQL injection vulnerabilities and attacks on web applications}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  keywords={Databases;Postal services;Programming;Web application;Vulnerabilities;SQL injection attacks},
  doi={10.1109/ICAETR.2014.7012815}}

@article{AMANATIDIS201648,
title = {Studying the evolution of PHP web applications},
journal = {Information and Software Technology},
volume = {72},
pages = {48-67},
year = {2016},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2015.11.009},
url = {https://www.sciencedirect.com/science/article/pii/S0950584915002062},
author = {Theodoros Amanatidis and Alexander Chatzigeorgiou},
keywords = {PHP, Software evolution, Lehman's laws, Software maintenance, Scripting languages, Software repositories},
abstract = {Context
Software evolution analysis can reveal important information concerning maintenance practices. Most of the studies which analyze software evolution focus on desktop applications written in compiled languages, such as Java and C. However, a vast amount of the web content today is powered by web applications written in PHP and thus the evolution of software systems written in such a scripting language deserves a distinct analysis.
Objective
The aim of this study is to analyze the evolution of open-source PHP projects in an attempt to investigate whether Lehman's laws of software evolution are confirmed in practice for web applications.
Method
Data (changes and metrics) have been collected for successive versions of 30 PHP projects while statistical tests (primarily trend tests) have been employed to evaluate the validity of each law on the examined web applications.
Results
We found that Laws: I (Continuing Change), III (Self regulation), IV (Conservation of organizational stability), V (Conservation of familiarity) and VI (Continuing growth) are confirmed. However, only for laws I and VI the results are statistically significant. On the other hand, according to our results laws II (Increasing complexity), and VIII (Feedback system) do not hold in practice. Finally, for the law that claims that quality declines over time (Law VII) the results are inconclusive.
Conclusions
The examined web applications indeed exhibit the property of constant growth as predicted by Lehman's laws and projects are under continuous maintenance. However, we have not found evidence that quality deteriorates over time, a finding which, if confirmed by other studies, could trigger further research into the reasons for which PHP web applications do not suffer from software ageing.}
}

@inproceedings{10.1145/2652524.2652540,
author = {Fagerholm, Fabian and Guinea, Alejandro S. and M\"{u}nch, J\"{u}rgen and Borenstein, Jay},
title = {The role of mentoring and project characteristics for onboarding in open source software projects},
year = {2014},
isbn = {9781450327749},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2652524.2652540},
doi = {10.1145/2652524.2652540},
abstract = {Context: Onboarding is a process that helps newcomers become integrated members of their organisation. Successful onboarding programs can result in increased performance in conventional organisations, but there is little guidance on how to onboard new developers in Open Source Software (OSS) projects. Goal: In this study, we examine how mentoring and project characteristics influence the effectiveness and efficiency of the onboarding process. We study a collaboration program involving a total of nine Open Source Software projects and more than 120 students from different universities around the world as part of Facebook's Education Modernization Program. Method: We use quantitative measurements of source code repositories, issue tracking systems, and discussion fora to examine how newcomers become contributing members of their OSS projects. Results: We found that developers receiving deliberate onboarding support through mentoring were more active at an earlier stage than developers entering projects through conventional means. Also, we found that project size and lifetime influenced onboarding. Conclusion: Empirical decision support can contribute to a more effective onboarding process in OSS projects. Mentor support in critical stages can accelerate the process, but project maturity is also a significant factor that increases the effect of onboarding.},
booktitle = {Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {55},
numpages = {10},
keywords = {case study, distributed development, mentoring, onboarding, open source software, organisational socialisation, software teams},
location = {Torino, Italy},
series = {ESEM '14}
}